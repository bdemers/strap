#!/usr/bin/env bash
# Summary: Runs strap to ensure your machine is fully configured
# Usage: strap run

# This script was initially based on Mike McQuaid's strap project, but now has a ton of changes:
# https://github.com/MikeMcQuaid/strap

set -Eeuo pipefail # https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/

STRAP_DEBUG="${STRAP_DEBUG:-}" && [ -n "$STRAP_DEBUG" ] && set -x
SUDO_PID="${SUDO_PID:-}"
command -v 'strap::lib::import' >/dev/null || { echo "strap::lib::import is not available" >&2; exit 1; }
strap::lib::import io || source ../lib/io.sh
strap::lib::import logging || source ../lib/logging.sh
strap::lib::import sudo || source ../lib/sudo.sh

STRAP_DEBUG="${STRAP_DEBUG:-}"
STRAP_SCRIPT="${STRAP_SCRIPT:-}" && [[ -z "$STRAP_SCRIPT" ]] && echo "STRAP_SCRIPT is not set" && exit 1
STRAP_HOME="${STRAP_HOME:-}" && [[ -z "$STRAP_HOME" ]] && echo "STRAP_HOME is not set" && exit 1
STRAP_USER_HOME="${STRAP_USER_HOME:-}" && [[ -z "$STRAP_USER_HOME" ]] && echo "STRAP_USER_HOME is not set" && exit 1
STRAP_CMD_DIR="${STRAP_CMD_DIR:-}" && [[ -z "$STRAP_CMD_DIR" ]] && echo "STRAP_CMD_DIR is not set" && exit 1
STRAP_LIB_DIR="${STRAP_LIB_DIR:-}" && [[ -z "$STRAP_LIB_DIR" ]] && echo "STRAP_LIB_DIR is not set" && exit 1

CLT_PLACEHOLDER="${CLT_PLACEHOLDER:-}"
STRAP_STEP=''
STRAP_SUCCESS=''
STRAP_QUIET_FLAG="-q"
Q="$STRAP_QUIET_FLAG"

STRAP_GIT_NAME="$(id -F)"
STRAP_GIT_EMAIL=
STRAP_GITHUB_USER=
STRAP_GITHUB_TOKEN=
STRAP_ISSUES_URL="https://github.com/ultimatedotfiles/strap/issues/new"

# Are we running interactive?
STRAP_INTERACTIVE='' # assume not interactive by default
[[ -t "0" || -p /dev/stdin ]] && STRAP_INTERACTIVE="1" # we're interactive

cleanup() {
  set +e
  rm -f "$CLT_PLACEHOLDER"
  if [ -z "$STRAP_SUCCESS" ]; then
    if [ -n "$STRAP_STEP" ]; then
      echo "!!! $STRAP_STEP FAILED" >&2
    else
      echo "!!! FAILED" >&2
    fi
    if [ -z "$STRAP_DEBUG" ]; then
      echo "!!! Run '$0 --debug' for debugging output." >&2
      echo "!!! If you're stuck: file an issue with debugging output at:" >&2
      echo "!!!   $STRAP_ISSUES_URL" >&2
    fi
  fi
}
# Trap any exit call:
trap 'cleanup' EXIT

echo -e "\n${FONT_BOLD}Bootstrapping your machine. Here we go!${FONT_CLEAR}\n"

#abort() { STRAP_STEP="";   echo "!!! $*" >&2; exit 1; }
#log()   { STRAP_STEP="$*"; echo "--> $*"; }
#logn()  { STRAP_STEP="$*"; printf -- "--> $* "; }

println() {
  local file="${1:-}"
  local msg="${2:-}"
  echo "$msg" >> "$file"
}

[ "$USER" = "root" ] && strap::abort "Run 'strap run' as yourself, not root."
groups | grep $Q admin || strap::abort "Add $USER to the admin group."

# Initialize sudo access:
strap::sudo::enable

#############################################################
# System Defaults
#############################################################

strap::bot "System Defaults"

# --------------

strap::running "Checking security settings"
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false
sudo defaults write com.apple.screensaver askForPassword -int 1
sudo defaults write com.apple.screensaver askForPasswordDelay -int 0
sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
sudo launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist 2>/dev/null

if [ -n "$STRAP_GIT_NAME" ] && [ -n "$STRAP_GIT_EMAIL" ]; then
  sudo defaults write /Library/Preferences/com.apple.loginwindow \
    LoginwindowText \
    "Found this computer? Please contact $STRAP_GIT_NAME at $STRAP_GIT_EMAIL."
fi
strap::ok

# --------------

# Check and enable full-disk encryption.
strap::running "Checking full-disk encryption status"
if fdesetup status | grep $Q -E "FileVault is (On|Off, but will be enabled after the next restart)."; then
  strap::ok
elif [ -n "$STRAP_INTERACTIVE" ]; then
  strap::action "Enabling full-disk encryption on next reboot:"
  sudo fdesetup enable -user "$USER" | tee ~/Desktop/"FileVault Recovery Key.txt"
  strap::ok
else
  echo && strap::abort "Run 'sudo fdesetup enable -user \"$USER\"' to enable full-disk encryption."
fi

# --------------

strap::running "Checking keyboard and finder settings"
# speed up the keyboard.  Defaults are *slow* for developers:
restart_finder=false
defaults write -g KeyRepeat -int 2
defaults write -g InitialKeyRepeat -int 14
if [ "$(defaults read com.apple.finder AppleShowAllFiles)" != "YES" ]; then
  defaults write com.apple.finder AppleShowAllFiles YES; # show hidden files
  restart_finder=true
fi
if [ "$(defaults read NSGlobalDomain AppleShowAllExtensions)" != "1" ]; then
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true # show all file extensions
  restart_finder=true
fi
[ $restart_finder = true ] && sudo killall Finder >/dev/null 2>&1
strap::ok

# --------------

strap::bot "Xcode Developer Tools"

strap::running "Checking Xcode Developer Tools"
XCODE_DIR=$(xcode-select -print-path 2>/dev/null || true)
if [ -z "$XCODE_DIR" ] || ! [ -f "$XCODE_DIR/usr/bin/git" ] || ! [ -f "/usr/include/iconv.h" ]; then

  strap::action "Installing Xcode Command Line Tools"
  CLT_PLACEHOLDER="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
  sudo touch "$CLT_PLACEHOLDER"
  CLT_PACKAGE=$(softwareupdate -l | grep -B 1 -E "Command Line (Developer|Tools)" | \
                awk -F"*" '/^ +\*/ {print $2}' | sed 's/^ *//' | head -n1)
  sudo softwareupdate -i "$CLT_PACKAGE"
  sudo rm -f "$CLT_PLACEHOLDER"
  if ! [ -f "/usr/include/iconv.h" ]; then
    if [ -n "$STRAP_INTERACTIVE" ]; then
      strap::action "Requesting user install of Xcode Command Line Tools"
      xcode-select --install
    else
      echo
      strap::abort "Run 'xcode-select --install' to install the Xcode Command Line Tools."
    fi
  fi
fi
strap::ok

# Check if the Xcode license is agreed to and agree if not.
xcode_license() {
  if /usr/bin/xcrun clang 2>&1 | grep $Q license; then
    if [ -n "$INTERACTIVE" ]; then
      strap::running "Asking for Xcode license confirmation"
      sudo xcodebuild -license
      strap::ok
    else
      abort "Run 'sudo xcodebuild -license' to agree to the Xcode license."
    fi
  fi
}
xcode_license

# --------------

strap::bot "Apple Software Updates"

strap::running "Checking Apple software updates"
if ! softwareupdate -l 2>&1 | grep $Q "No new software available."; then
  strap::action "Installing Apple software updates. This could take a while"
  echo
  sudo softwareupdate --install --all
  xcode_license
fi
strap::ok

#############################################################
# Shell init files:
#############################################################

strap::bot "Shell Init Files"

STRAP_SHELL=$(basename "$SHELL")
STRAP_SHELL_INIT_FILE="${STRAP_USER_HOME:-}/straprc"

strap::running "Checking $STRAP_SHELL_INIT_FILE exists"
if [ ! -f "$STRAP_SHELL_INIT_FILE" ]; then
  echo && strap::action "Creating $STRAP_SHELL_INIT_FILE"
  cp "$STRAP_HOME/etc/profile.d/straprc" "$STRAP_USER_HOME/straprc"
fi
strap::ok

file="$HOME/.bash_profile"
strap::running "Checking ~/.bash_profile exists"
[ ! -f "$file" ] && strap::action "Creating ~/.bash_profile" && touch "$file"
strap::ok

declare -a files=("$HOME/.bashrc" "$HOME/.zshrc")
for file in "${files[@]}"; do

  strap::running "Checking $file exists"
  [ ! -f "$file" ] && strap::action "Creating $file" && touch "$file"
  strap::ok

  strap::running "Checking $STRAP_SHELL_INIT_FILE referenced in $file"
  if ! grep -q "$STRAP_SHELL_INIT_FILE" "$file"; then
    strap::action "Enabling $STRAP_SHELL_INIT_FILE in $file"
    println "$file" ''
    println "$file" '# strap:begin'
    println "$file" "[ -f \"$STRAP_SHELL_INIT_FILE\" ] && . \"$STRAP_SHELL_INIT_FILE\""
    println "$file" '# strap:end'
  fi
  strap::ok
done

file="$HOME/.bash_profile"
strap::running "Checking ~/.bashrc in ~/.bash_profile per bash user guide recommendations"
if ! grep -q "bashrc" "$file"; then
  println "$file" ''
  println "$file" '# strap:begin'
  println "$file" '# source .bashrc from within .bash_profile per bash user guide: '
  println "$file" '# https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html'
  println "$file" '[ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc"'
  println "$file" '# strap:end'
fi
strap::ok

#############################################################
# Homebrew:
#############################################################
#"$STRAP_HOME/plugins/brew/bin/run"

#strap::lib::import brew brew || . ../plugins/brew/lib/brew.sh

# make config/state a little more secure, just in case:
chmod -R go-rwx "$STRAP_USER_HOME"

STRAP_SUCCESS="1"
printf "\n${FONT_BOLD}${FONT_GREEN}SUCCESS: Your system is now Strap'd!${FONT_CLEAR}\n\n"
